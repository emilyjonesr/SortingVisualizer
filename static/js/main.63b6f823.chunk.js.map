{"version":3,"sources":["SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","sleep","milliseconds","Promise","resolve","setTimeout","state","arr","bubbleRunning","selectionRunning","insertionRunning","speed","i","push","Math","floor","random","this","setState","length","document","getElementById","style","color","disabled","j","backgroundColor","tempp","height","smallestIndex","temp","key","value","num","className","id","onClick","resetSet","bubbleSort","selectionSort","insertionSort","type","min","max","class","onChange","changeSpeed","bind","changeBlockNum","map","val","idx","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.63b6f823.chunk.js","sourcesContent":["import React, { Component } from 'react' //rec\nimport './SortingVisualizer.css';\n\nclass SortingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            arr: [],\n            bubbleRunning: false,\n            selectionRunning: false,\n            insertionRunning: false,\n            speed: 0\n        };\n    }\n    \n    // creates bar graph when page is intitally opened\n    componentDidMount() {\n        const arr = [];\n        for (let i = 0; i < 80; i++) {\n            arr.push(Math.floor(Math.random() * 600) + 5);\n        }\n        this.setState({arr});\n    }\n\n    // randomizes a new bar graph\n    async resetSet(length) {\n        // stops sorting if resetSet is clicked\n        document.getElementById(\"newSet\").style.color = `${'#F45B69'}`;\n        if(this.bubbleRunning || this.selectionRunning || this.insertionRunning)\n        {\n            this.bubbleRunning = false;\n            this.selectionRunning = false;\n            this.insertionRunning = false;\n        }\n\n        const arr = [];\n        for (let i = 0; i < length; i++) {\n            arr.push(Math.floor(Math.random() * 600) + 5);\n        }\n        await this.sleep(200);\n        document.getElementById(\"newSet\").style.color = `${'white'}`;\n        this.setState({arr});\n    }\n\n    sleep = (milliseconds) => {\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\n    }\n\n    async bubbleSort(arr, speed) {\n        document.getElementById(\"bubble\").disabled = true;\n        document.getElementById(\"selection\").disabled = true;\n        document.getElementById(\"insertion\").disabled = true;\n        document.getElementById(\"speed\").disabled = true;\n        document.getElementById(\"blockNum\").disabled = true;\n        document.getElementById(\"bubble\").style.color = `${'#F45B69'}`;\n        this.bubbleRunning = true;\n        \n        for(let j = 0; j < arr.length-1; j++) {\n            for(let i = 0; i < arr.length-j-1; i++) {\n                if(!this.bubbleRunning)\n                    break;\n                document.getElementById(i).style.backgroundColor = '#F45B69';\n                document.getElementById(i+1).style.backgroundColor = '#F45B69';\n                await this.sleep(speed);\n                if(arr[i] > arr[i+1])\n                {\n                    let tempp = arr[i];\n                    arr[i] = arr[i+1];\n                    arr[i+1] = tempp;\n\n                    document.getElementById(i).style.height = `${arr[i]}px`;\n                    document.getElementById(i + 1).style.height = `${arr[i+1]}px`;\n                }               \n                document.getElementById(i).style.backgroundColor = '#028090';\n                document.getElementById(i+1).style.backgroundColor = '#028090';        \n            } \n        }\n        \n        document.getElementById(\"bubble\").style.color = `${'white'}`;\n        document.getElementById(\"bubble\").disabled = false;\n        document.getElementById(\"selection\").disabled = false;\n        document.getElementById(\"insertion\").disabled = false;\n        document.getElementById(\"speed\").disabled = false;\n        document.getElementById(\"blockNum\").disabled = false;\n        this.bubbleRunning = false;\n        return arr; \n    }\n\n    async selectionSort(arr, speed) {\n        document.getElementById(\"bubble\").disabled = true;\n        document.getElementById(\"selection\").disabled = true;\n        document.getElementById(\"insertion\").disabled = true;\n        document.getElementById(\"speed\").disabled = true;\n        document.getElementById(\"blockNum\").disabled = true;\n        document.getElementById(\"selection\").style.color = `${'#F45B69'}`;\n        this.selectionRunning = true;\n\n        for(let i = 0; i < arr.length-1; i++) {\n            let smallestIndex = i;\n            for(let j = i+1; j < arr.length; j++) {\n                if(!this.selectionRunning)\n                    break;\n                document.getElementById(i).style.backgroundColor = '#F45B69';\n                document.getElementById(j).style.backgroundColor = '#F45B69';\n                await this.sleep(speed);\n                document.getElementById(i).style.backgroundColor = '#028090';\n                document.getElementById(j).style.backgroundColor = '#028090';\n\n                if(arr[j] < arr[smallestIndex]) {\n                    smallestIndex = j;\n                }\n            }\n            \n            let temp = arr[i]\n            arr[i] = arr[smallestIndex];\n            arr[smallestIndex] = temp;\n\n            document.getElementById(i).style.height = `${arr[i]}px`;\n            document.getElementById(smallestIndex).style.height = `${arr[smallestIndex]}px`;\n        }\n\n        document.getElementById(\"selection\").style.color = `${'white'}`;\n        document.getElementById(\"bubble\").disabled = false;\n        document.getElementById(\"selection\").disabled = false;\n        document.getElementById(\"insertion\").disabled = false;\n        document.getElementById(\"speed\").disabled = false;\n        document.getElementById(\"blockNum\").disabled = false;\n        this.selectionRunning = false;\n        return arr;\n    }\n\n    async insertionSort(arr, speed) {\n        document.getElementById(\"bubble\").disabled = true;\n        document.getElementById(\"selection\").disabled = true;\n        document.getElementById(\"insertion\").disabled = true;\n        document.getElementById(\"speed\").disabled = true;\n        document.getElementById(\"blockNum\").disabled = true;\n        document.getElementById(\"insertion\").style.color = `${'#F45B69'}`;\n        this.insertionRunning = true;\n\n        for(let i = 1; i < arr.length; i++) {\n            let key = arr[i];\n            let j = i-1;\n            document.getElementById(i).style.backgroundColor = '#F45B69';\n            while(j >= 0 && arr[j] > key) {\n                if(!this.insertionRunning)\n                    break;\n                document.getElementById(j).style.backgroundColor = '#F45B69';\n                await this.sleep(speed);\n                document.getElementById(j).style.backgroundColor = '#028090';\n                arr[j + 1] = arr[j];\n                document.getElementById(j+1).style.height = `${arr[j+1]}px`;\n                j--;\n                document.getElementById(j+1).style.height = `${arr[j+1]}px`;\n            }\n            document.getElementById(i).style.backgroundColor = '#028090';\n            arr[j + 1] = key;\n            document.getElementById(j+1).style.height = `${arr[j+1]}px`;\n        }\n\n        document.getElementById(\"insertion\").style.color = `${'white'}`;\n        document.getElementById(\"bubble\").disabled = false;\n        document.getElementById(\"selection\").disabled = false;\n        document.getElementById(\"insertion\").disabled = false;\n        document.getElementById(\"speed\").disabled = false;\n        document.getElementById(\"blockNum\").disabled = false;\n        this.insertionRunning = false;\n        return arr;\n    }\n\n    changeSpeed() {\n        let speed = document.getElementById(\"speed\").value;\n        this.setState({speed});\n    }\n\n    changeBlockNum() {\n        let num = document.getElementById(\"blockNum\").value;\n        const arr = [];\n        for (let i = 0; i < num; i++) {\n            arr.push(Math.floor(Math.random() * 600) + 5);\n        }\n        this.setState({arr});\n    }\n\n    render() {\n        return (\n        <header>\n            <button className=\"newSet\" id=\"newSet\" onClick= {() => this.resetSet(this.state.arr.length)}> New Set </button>\n            <button id=\"bubble\" onClick= {() => this.bubbleSort(this.state.arr, this.state.speed)}> Bubble Sort </button>\n            <button id=\"selection\" onClick= {() => this.selectionSort(this.state.arr, this.state.speed)}> Selection Sort </button>\n            <button id=\"insertion\" onClick= {() => this.insertionSort(this.state.arr,  this.state.speed)}> Insertion Sort </button>\n            <div className=\"slidecontainer\">\n                <p>Sorting Speed:</p>\n                <input id=\"speed\" type=\"range\" min=\"0\" max=\"700\" class=\"speedSlider\" onChange={this.changeSpeed.bind(this, 'value')}/>\n            </div>\n            <div className=\"slidecontainer\">\n                <p>Number of Bars:</p>\n                <input id=\"blockNum\" type=\"range\" min=\"10\" max=\"150\"  class=\"barSlider\" onChange={this.changeBlockNum.bind(this, 'value')}/>\n            </div>\n            \n            <div className='allBlocks'> \n                {this.state.arr.map((val, idx) => (\n                    <div id={idx} className='block' style={{height: `${val}px`}} key={idx}> </div>\n                ))}\n            </div>\n        </header>\n        )\n    }\n}\n\nexport default SortingVisualizer\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n      <SortingVisualizer></SortingVisualizer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}